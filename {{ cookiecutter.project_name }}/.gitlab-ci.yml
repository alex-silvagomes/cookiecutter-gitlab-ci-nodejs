image: docker:20.10
stages:  
  - build
  - test
  - deploy

services: # use services to link your app container to the dast job
  - name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    alias: {{cookiecutter.project_slug}}

variables:
  CI_INSIDERSEC_SCORE: 20 # 0-100
  DAST_FULL_SCAN_ENABLED: "true" # do a full scan
  DAST_ZAP_USE_AJAX_SPIDER: "true" # use the ajax spider

unit-tests:
  image: node:lts-alpine3.12
  stage: test
  before_script:
    - echo "Baixando dependencias de teste"
    - npm install
  script:
    - echo "Executando os testes unitarios"
    - npm test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
    
functional-tests:
  stage: test
  script:
    - echo "build/publish test 1.0"
    - echo "build/publish test 1.1"
    - echo "build/publish test 1.2"

security-tests:
  image: alpine:latest
  stage: test
  before_script:
    - echo "zip */folders to Security Analysis "
    - apk --no-cache add zip
    - zip -r build.zip .
    - echo "Baixando o insiderci"
    - wget https://github.com/insidersec/insiderci/releases/latest/download/insiderci_linux_x86_64.tar.gz -q 
    - tar -xf insiderci_linux_x86_64.tar.gz
    - chmod +x ./insiderci

  script:
    - echo "Security Analysis - Analise do codigo do app e bibliotecas importadas no projeto"
    - pwd
    - ls -la
    - ./insiderci -email "$CI_INSIDERSEC_USER" -password "$CI_INSIDERSEC_PASSWORD" -score $CI_INSIDERSEC_SCORE -save -tech "javascript" "build.zip"
    - ls -la
  artifacts:
    when: always
    reports:
      codequality:
        - result-*.html

accessibility-tests:
  stage: test
  script:
    - echo "test accessibility (OK)"

build-docker:
  services:
    - docker:dind
  before_script:
    - docker login ${CI_REGISTRY_IMAGE} -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - pwd
    - ls -la
  stage: build
  script: 
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest


.deploy:
  stage: deploy
  image:
    name: alpine/k8s:1.20.4
    entrypoint: [""]
  before_script:
    - helm version
  script:
    - echo "deploy K8s staging"

deploy-to-developer:
  extends: .deploy
  environment:
    name: staging
    url: https://staging.example.com
  only: 
    - develop

deploy-to-production:
  extends: .deploy
  environment:
    name: production
    url: https://example.com
  only:
    - master

